name: Build and Deploy Jekyll Site to GitHub Pages

# İş akışının ne zaman tetikleneceğini belirler
on:
  # 'main' (veya 'master') dalına yapılan her push işleminde çalışır
  push:
    branches:
      - main # Kullandığınız ana dalın adıyla değiştirin (örn: master)
  # Ayrıca, GitHub arayüzünden manuel olarak da çalıştırılabilmesini sağlar
  workflow_dispatch:

# İş akışının çalışması için gerekli izinler
permissions:
  contents: read  # Depo içeriğini okuma izni (checkout için)
  pages: write    # GitHub Pages'a yazma/deploy etme izni
  id-token: write # GitHub Pages deploy için OpenID Connect token oluşturma izni

# Tek bir iş (job) tanımlıyoruz: build ve deploy
jobs:
  build_and_deploy:
    # Bu işin çalışacağı ortam (GitHub Pages'a deploy için)
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Deploy edilen sitenin URL'sini gösterir
    runs-on: ubuntu-latest # İşin çalışacağı sanal makine türü

    steps:
      # Adım 1: Depo içeriğini (kodları) sanal makineye indir (checkout)
      - name: Checkout repository
        uses: actions/checkout@v4 # Güncel versiyonu kullanmak iyidir

      # Adım 2: Ruby ortamını kur, Bundler'ı ayarla ve gem bağımlılıklarını yükle
      - name: Setup Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Projenizin Gemfile'ı ile uyumlu Ruby sürümü (örn: 3.0, 3.1, 3.2)
                              # Kullandığınız Jekyll ve eklenti versiyonlarına göre seçin.
          bundler-cache: true # Gemfile.lock dosyasını kullanarak 'bundle install' çalıştırır
                              # ve gem'leri önbelleğe alarak sonraki build'leri hızlandırır.

      # Adım 3: GitHub Pages için gerekli yapılandırmayı yap
      # Bu adım, baseurl gibi ortam değişkenlerini ayarlar ve Jekyll'ın doğru yolları kullanmasını sağlar.
      - name: Setup GitHub Pages
        id: pages # Bu adıma bir ID veriyoruz, böylece çıktılarına erişebiliriz
        uses: actions/configure-pages@v5 # Güncel versiyonu kullanın

      # Adım 4: Jekyll sitesini build et
      # Bu adım, Gemfile'ınızdaki Jekyll ve tüm eklentileri (jekyll-polyglot dahil) kullanarak siteyi oluşturur.
      - name: Build Jekyll site
        # JEKYLL_ENV=production, sitenin üretim modunda (örn: taslaklar olmadan) build edilmesini sağlar.
        # --destination ./_site, build çıktısının _site klasörüne yazılmasını belirtir.
        # --baseurl "${{ steps.pages.outputs.base_path }}", sitenin doğru alt dizinde (baseurl) çalışmasını sağlar.
        #   Bu değer, 'Setup GitHub Pages' adımından gelir.
        run: bundle exec jekyll build --destination ./_site --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      # Adım 5: Build edilen siteyi (artifact) GitHub Pages'a yükle
      # Bu, _site klasörünün içeriğini deploy edilmek üzere hazırlar.
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3 # Güncel versiyonu kullanın
        with:
          path: ./_site # Yüklenecek klasörün yolu

      # Adım 6: Yüklenen artifact'i GitHub Pages'a deploy et
      - name: Deploy to GitHub Pages
        id: deployment # Bu adıma bir ID veriyoruz
        uses: actions/deploy-pages@v4 # Güncel versiyonu kullanın
        # Bu adım, 'Upload GitHub Pages artifact' adımından gelen çıktıyı alır ve siteyi yayınlar.